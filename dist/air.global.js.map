{"version":3,"names":[],"mappings":"","sources":["air.global.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar air = require('./lib/air');\n\nmodule.exports = {\n  air: air,\n}\n\nif(window) {\n  window.$ = air;\n}\n\n},{\"./lib/air\":2}],2:[function(require,module,exports){\n;(function() {\n  'use strict'\n\n  /**\n   *  Chainable wrapper class.\n   *\n   *  This is the core of the entire plugin system and typically you extend\n   *  functionality by adding methods to the prototype of this function.\n   *\n   *  However a plugin may also add static methods to the main function,\n   *  see the `create` plugin for an example of adding static methods.\n   *\n   *  This implementation targets modern browsers (IE9+) and requires that\n   *  the array methods `isArray`, `forEach` and `filter` are available,\n   *  for older browsers you will need to include polyfills.\n   *\n   *  @param el A DOM element, array of elements or selector.\n   *  @param context The context element for a selector.\n   */\n  function Air(el, context) {\n    //window.a = 'b';\n    context = context || document;\n    this.dom = typeof el === 'string' ? context.querySelectorAll(el) : el;\n    if(el instanceof Air) {\n      this.dom = el.dom.slice(0);\n    }else if(!Array.isArray(el)) {\n      if(!(this.dom instanceof NodeList)) {\n        this.dom = [this.dom];\n      }else{\n        this.dom = Array.prototype.slice.call(this.dom);\n      }\n    }\n  }\n\n  var proto = Air.prototype;\n\n  /**\n   *  Get the number of wrapped DOM elements.\n   */\n  Object.defineProperty(\n    proto, 'length', {get: function getLength(){return this.dom.length}});\n\n  /**\n   *  Get the DOM element at the specified index.\n   */\n  proto.get = function get(index) {\n    if(index === undefined) { return this.dom };\n    return this.dom[index];\n  }\n\n  /**\n   *  Main function, see the documentation for the `Air` class.\n   */\n  function air(el, context) {\n    return new Air(el, context);\n  }\n\n  /**\n   *  Static plugin method.\n   *\n   *  @param plugins Array of plugin functions.\n   */\n  function plugin(plugins) {\n    var z;\n\n    /**\n     *  Plugin configuration options object passed to plugin methods.\n     */\n    var opts = {\n      main: air,\n      clazz: Air,\n      proto: proto,\n      plugin: plugin\n    };\n\n    if(Array.isArray(plugins)) {\n      plugins.forEach(function(method) {\n        method(opts);\n      })\n    // assume object style definition\n    // allows passing runtime configuration to\n    // a plugin where necessary\n    }else{\n      for(z in plugins) {\n        plugins[z].plugin(opts, plugins[z].conf)\n      }\n    }\n  }\n\n  air.plugin = plugin;\n\n  module.exports = air;\n})();\n\n},{}]},{},[1]);\n"],"file":"air.global.js","sourceRoot":"/source/"}